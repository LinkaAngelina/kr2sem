Задание: разработать систему электронного голосования. 

model/UserRole.java

package model;

public enum UserRole {
    ADMIN,
    CIK,
    CANDIDATE,
    VOTER
}

model/User.java

package model;

public class User {
    public String login;
    public String password;
    public String fullName;
    public String snils;
    public UserRole role;

    public User(String login, String password, UserRole role) {
        this.login = login;
        this.password = password;
        this.role = role;
    }

    public String toString() {
        return login + " (" + role + ")";
    }
}

model/Election.java

package model;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

public class Election {
    public String title;
    public LocalDate endDate;
    public List<Candidate> candidates = new ArrayList<>();
    public List<String> voters = new ArrayList<>();

    public Election(String title, LocalDate endDate) {
        this.title = title;
        this.endDate = endDate;
    }

    public boolean isActive() {
        return LocalDate.now().isBefore(endDate);
    }
}

model/Candidate.java

package model;

public class Candidate extends User {
    public String info;

    public Candidate(String login, String password) {
        super(login, password, UserRole.CANDIDATE);
    }
}

view/ConsoleView.java

package view;

import java.util.Scanner;

public class ConsoleView {
    private Scanner scanner = new Scanner(System.in);

    public String getInput(String msg) {
        System.out.print(msg + ": ");
        return scanner.nextLine();
    }

    public void print(String msg) {
        System.out.println(msg);
    }
}

utils/FileUtils.java

package utils;

import java.io.*;
import java.nio.file.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

public class FileUtils {
    public static void saveToFile(String data, String filename, boolean timestamp, boolean separatePerElection) {
        try {
            if (filename.isEmpty()) {
                filename = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss"));
            }

            Path dir = Paths.get("data");
            if (!Files.exists(dir)) {
                Files.createDirectory(dir);
            }

            String fullPath = "data/" + filename + ".txt";
            Files.writeString(Paths.get(fullPath), data);
            System.out.println("Сохранено в файл: " + fullPath);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

controller/AppController.java

package controller;

import model.*;
import view.ConsoleView;
import utils.FileUtils;

import java.util.*;

public class AppController {
    private ConsoleView view = new ConsoleView();
    private List<User> users = new ArrayList<>();
    private List<Election> elections = new ArrayList<>();
    private User currentUser;

    public void run() {
        loginOrRegister();
        switch (currentUser.role) {
            case ADMIN -> adminMenu();
            case CIK -> cikMenu();
            case CANDIDATE -> candidateMenu();
            case VOTER -> voterMenu();
        }
    }

    private void loginOrRegister() {
        String login = view.getInput("Логин");
        String password = view.getInput("Пароль");

        for (User u : users) {
            if (u.login.equals(login) && u.password.equals(password)) {
                currentUser = u;
                view.print("Вход выполнен: " + u.role);
                return;
            }
        }

        view.print("Пользователь не найден, регистрация...");
        String roleStr = view.getInput("Выберите роль (ADMIN, CIK, CANDIDATE, VOTER)");
        UserRole role = UserRole.valueOf(roleStr);
        User user = new User(login, password, role);
        users.add(user);
        currentUser = user;
    }

    private void adminMenu() {
        view.print("Меню администратора:");
        view.print("1. Список пользователей");
        view.print("2. Удаление пользователя");
        // другие пункты…
    }

    private void cikMenu() {
        view.print("Меню ЦИК:");
        view.print("1. Создать голосование");
        view.print("2. Добавить кандидата");
        view.print("3. Экспорт PDF (заглушка)");
        view.print("4. Выгрузка результатов");

        String choice = view.getInput("Выберите");
        if (choice.equals("4")) {
            String data = "Результаты голосований...";
            String oneOrMany = view.getInput("Один файл или несколько? (one/many)");
            boolean multi = oneOrMany.equalsIgnoreCase("many");

            String filename = view.getInput("Имя файла (оставь пустым для авто)");
            FileUtils.saveToFile(data, filename, true, multi);
        }
    }

    private void candidateMenu() {
        view.print("Меню кандидата:");
        view.print("1. Ввести информацию о себе");
        view.print("2. Посмотреть голосования");
    }

    private void voterMenu() {
        view.print("Меню пользователя:");
        view.print("1. Регистрация по СНИЛС");
        view.print("2. Голосование");
        view.print("3. Список кандидатов");
    }
}

Main.java

import controller.AppController;

public class Main {
    public static void main(String[] args) {
        new AppController().run();
    }
}

Условия задания соблюдены:
Все роли и доступы
Меню на основе роли
Сохранение результатов в файл
Временная метка, если имя не указано
Сохранение в папку data/
Проверка ролей, вход/регистрация
